input createDefiInput {
  data: DefiInput
}

type createDefiPayload {
  defi: Defi
}

input createEnteteInput {
  data: EnteteInput
}

type createEntetePayload {
  entete: Entete
}

input createParcoursInput {
  data: ParcoursInput
}

type createParcoursPayload {
  parcour: Parcours
}

input createQuizzInput {
  data: QuizzInput
}

type createQuizzPayload {
  quizz: Quizz
}

input createQuoteInput {
  data: QuoteInput
}

type createQuotePayload {
  quote: Quote
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createTexteInput {
  data: TexteInput
}

type createTextePayload {
  texte: Texte
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

input createVideoInput {
  data: VideoInput
}

type createVideoPayload {
  video: Video
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

type Defi {
  titre: String
  contenu: String
  parcours(sort: String, limit: Int, start: Int, where: JSON): [Parcours]
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}

input DefiInput {
  titre: String
  contenu: String
  parcours: [ID]
}

input deleteDefiInput {
  where: InputID
}

type deleteDefiPayload {
  defi: Defi
}

input deleteEnteteInput {
  where: InputID
}

type deleteEntetePayload {
  entete: Entete
}

input deleteParcoursInput {
  where: InputID
}

type deleteParcoursPayload {
  parcour: Parcours
}

input deleteQuizzInput {
  where: InputID
}

type deleteQuizzPayload {
  quizz: Quizz
}

input deleteQuoteInput {
  where: InputID
}

type deleteQuotePayload {
  quote: Quote
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteTexteInput {
  where: InputID
}

type deleteTextePayload {
  texte: Texte
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input deleteVideoInput {
  where: InputID
}

type deleteVideoPayload {
  video: Video
}

input editDefiInput {
  titre: String
  contenu: String
  parcours: [ID]
}

input editEnteteInput {
  Titre: String
  texte_personnage: String
  chapitre: ENUM_ENTETE_CHAPITRE
  parcour: ID
}

input editFileInput {
  name: String
  hash: String
  sha256: String
  ext: String
  mime: String
  size: String
  url: String
  provider: String
  public_id: String
  related: [ID]
}

input editParcoursInput {
  Titre: String
  couleur: String
  personnage: ID
  url_slug: String
  card_personnage: ID
  couleur_2: String
  duration: Int
  character_name: String
  background_mobile: ID
  defis: [ID]
  background_desktop: ID
  textes: [ID]
  videos: [ID]
  quotes: [ID]
  entetes: [ID]
  quizzes: [ID]
}

input editQuizzInput {
  titre: String
  bonne_reponse: ENUM_QUIZZ_BONNE_REPONSE
  reponse_un: String
  reponse_deux: String
  reponse_trois: String
  explication: String
  ordre: String
  parcour: ID
  chapitre: ENUM_QUIZZ_CHAPITRE
}

input editQuoteInput {
  titre: String
  paragraphe: String
  character_quote: String
  chapitre: ENUM_QUOTE_CHAPITRE
  ordre: String
  parcours: [ID]
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editTexteInput {
  titre: String
  paragraphe: String
  chapitre: ENUM_TEXTE_CHAPITRE
  ordre: String
  parcours: [ID]
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

input editVideoInput {
  titre: String
  Texte: String
  url_video: String
  chapitre: ENUM_VIDEO_CHAPITRE
  ordre: String
  parcour: ID
}

type Entete {
  Titre: String
  texte_personnage: String
  chapitre: ENUM_ENTETE_CHAPITRE
  parcour: Parcours
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}

input EnteteInput {
  Titre: String
  texte_personnage: String
  chapitre: ENUM_ENTETE_CHAPITRE
  parcour: ID
}

enum ENUM_ENTETE_CHAPITRE {
  Comprendre
  Changer
  Agir
  Intro
}

enum ENUM_QUIZZ_BONNE_REPONSE {
  reponse_un
  reponse_deux
  reponse_trois
}

enum ENUM_QUIZZ_CHAPITRE {
  Comprendre
  Changer
  Agir
}

enum ENUM_QUOTE_CHAPITRE {
  Comprendre
  Changer
  Agir
}

enum ENUM_TEXTE_CHAPITRE {
  Comprendre
  Changer
  Agir
}

enum ENUM_VIDEO_CHAPITRE {
  Comprendre
  Changer
  Agir
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related: [ID]
}

input InputID {
  id: ID!
}

scalar JSON

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Defi | createDefiPayload | updateDefiPayload | deleteDefiPayload | Entete | createEntetePayload | updateEntetePayload | deleteEntetePayload | Parcours | createParcoursPayload | updateParcoursPayload | deleteParcoursPayload | Quizz | createQuizzPayload | updateQuizzPayload | deleteQuizzPayload | Quote | createQuotePayload | updateQuotePayload | deleteQuotePayload | Texte | createTextePayload | updateTextePayload | deleteTextePayload | Video | createVideoPayload | updateVideoPayload | deleteVideoPayload | UploadFile | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload

type Mutation {
  createDefi(input: createDefiInput): createDefiPayload
  updateDefi(input: updateDefiInput): updateDefiPayload
  deleteDefi(input: deleteDefiInput): deleteDefiPayload
  createEntete(input: createEnteteInput): createEntetePayload
  updateEntete(input: updateEnteteInput): updateEntetePayload
  deleteEntete(input: deleteEnteteInput): deleteEntetePayload
  createParcours(input: createParcoursInput): createParcoursPayload
  updateParcours(input: updateParcoursInput): updateParcoursPayload
  deleteParcours(input: deleteParcoursInput): deleteParcoursPayload
  createQuizz(input: createQuizzInput): createQuizzPayload
  updateQuizz(input: updateQuizzInput): updateQuizzPayload
  deleteQuizz(input: deleteQuizzInput): deleteQuizzPayload
  createQuote(input: createQuoteInput): createQuotePayload
  updateQuote(input: updateQuoteInput): updateQuotePayload
  deleteQuote(input: deleteQuoteInput): deleteQuotePayload
  createTexte(input: createTexteInput): createTextePayload
  updateTexte(input: updateTexteInput): updateTextePayload
  deleteTexte(input: deleteTexteInput): deleteTextePayload
  createVideo(input: createVideoInput): createVideoPayload
  updateVideo(input: updateVideoInput): updateVideoPayload
  deleteVideo(input: deleteVideoInput): deleteVideoPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
}

type Parcours {
  Titre: String
  couleur: String
  personnage: UploadFile
  url_slug: String
  card_personnage: UploadFile
  couleur_2: String
  duration: Int
  character_name: String
  background_mobile: UploadFile
  background_desktop: UploadFile
  defis(sort: String, limit: Int, start: Int, where: JSON): [Defi]
  textes(sort: String, limit: Int, start: Int, where: JSON): [Texte]
  videos(sort: String, limit: Int, start: Int, where: JSON): [Video]
  quotes(sort: String, limit: Int, start: Int, where: JSON): [Quote]
  entetes(sort: String, limit: Int, start: Int, where: JSON): [Entete]
  quizzes(sort: String, limit: Int, start: Int, where: JSON): [Quizz]
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}

input ParcoursInput {
  Titre: String
  couleur: String
  personnage: ID
  url_slug: String
  card_personnage: ID
  couleur_2: String
  duration: Int
  character_name: String
  background_mobile: ID
  defis: [ID]
  background_desktop: ID
  textes: [ID]
  videos: [ID]
  quotes: [ID]
  entetes: [ID]
  quizzes: [ID]
}

type Query {
  defi(id: ID!): Defi
  defis(sort: String, limit: Int, start: Int, where: JSON): [Defi]
  entete(id: ID!): Entete
  entetes(sort: String, limit: Int, start: Int, where: JSON): [Entete]
  parcour(id: ID!): Parcours
  parcours(sort: String, limit: Int, start: Int, where: JSON): [Parcours]
  quizz(id: ID!): Quizz
  quizzes(sort: String, limit: Int, start: Int, where: JSON): [Quizz]
  quote(id: ID!): Quote
  quotes(sort: String, limit: Int, start: Int, where: JSON): [Quote]
  texte(id: ID!): Texte
  textes(sort: String, limit: Int, start: Int, where: JSON): [Texte]
  video(id: ID!): Video
  videos(sort: String, limit: Int, start: Int, where: JSON): [Video]
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  me: UsersPermissionsMe
}

type Quizz {
  titre: String
  bonne_reponse: ENUM_QUIZZ_BONNE_REPONSE
  reponse_un: String
  reponse_deux: String
  reponse_trois: String
  explication: String
  ordre: String
  parcour: Parcours
  chapitre: ENUM_QUIZZ_CHAPITRE
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}

input QuizzInput {
  titre: String
  bonne_reponse: ENUM_QUIZZ_BONNE_REPONSE
  reponse_un: String
  reponse_deux: String
  reponse_trois: String
  explication: String
  ordre: String
  parcour: ID
  chapitre: ENUM_QUIZZ_CHAPITRE
}

type Quote {
  titre: String
  paragraphe: String
  character_quote: String
  chapitre: ENUM_QUOTE_CHAPITRE
  ordre: String
  parcours(sort: String, limit: Int, start: Int, where: JSON): [Parcours]
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}

input QuoteInput {
  titre: String
  paragraphe: String
  character_quote: String
  chapitre: ENUM_QUOTE_CHAPITRE
  ordre: String
  parcours: [ID]
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

type Texte {
  titre: String
  paragraphe: String
  chapitre: ENUM_TEXTE_CHAPITRE
  ordre: String
  parcours(sort: String, limit: Int, start: Int, where: JSON): [Parcours]
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}

input TexteInput {
  titre: String
  paragraphe: String
  chapitre: ENUM_TEXTE_CHAPITRE
  ordre: String
  parcours: [ID]
}

input updateDefiInput {
  where: InputID
  data: editDefiInput
}

type updateDefiPayload {
  defi: Defi
}

input updateEnteteInput {
  where: InputID
  data: editEnteteInput
}

type updateEntetePayload {
  entete: Entete
}

input updateParcoursInput {
  where: InputID
  data: editParcoursInput
}

type updateParcoursPayload {
  parcour: Parcours
}

input updateQuizzInput {
  where: InputID
  data: editQuizzInput
}

type updateQuizzPayload {
  quizz: Quizz
}

input updateQuoteInput {
  where: InputID
  data: editQuoteInput
}

type updateQuotePayload {
  quote: Quote
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateTexteInput {
  where: InputID
  data: editTexteInput
}

type updateTextePayload {
  texte: Texte
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

input updateVideoInput {
  where: InputID
  data: editVideoInput
}

type updateVideoPayload {
  video: Video
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
  id: ID!
}

type UsersPermissionsRole {
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  id: ID!
}

type UsersPermissionsUser {
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}

type Video {
  titre: String
  Texte: String
  url_video: String
  chapitre: ENUM_VIDEO_CHAPITRE
  ordre: String
  parcour: Parcours
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}

input VideoInput {
  titre: String
  Texte: String
  url_video: String
  chapitre: ENUM_VIDEO_CHAPITRE
  ordre: String
  parcour: ID
}
